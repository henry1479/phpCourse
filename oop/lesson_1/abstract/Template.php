<?php
// абстрактные классы имеют методы, у которых нет реализации
// чтобы у каждого потомка был метод, который называется одинаково
// потомки должны переопределить этот метод
// экземпляр абстрактного класса создавать нельзя
// принцип Solid
// класс имеет одно предназначение
// 
// все реализации зависят абстракции. Все начинается с создания
// абстрактных классов
// интерфейсы - это абстрактныке классы без полей, где все методы абстрактные
// классы могут наследовать от нескольких интерфейсов абстрактные
// методы
// finally - запрет переопределения метода
// trait - контейнер для методов классов, которые дублируются
// к константам обращаются по именам класса или self::
// Singleton - паттерн (один коннект на все приложение)
// более одного экземпляра делать нельзя
// закрываем конструктор и вызываем getInstance()

abstract class Template {
    private $title = 'Test site';
    abstract function content();

    function header () {        
        echo "Header";
    }
    
    function footer () {        
        echo "Footer";
    }
    // вывод сайта
    function render () {
        $this -> header();
        $this -> content();
        $this -> footer();
    }
}

?>